<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengyongbin.github.io/"/>
  <updated>2020-08-08T14:49:13.536Z</updated>
  <id>https://fengyongbin.github.io/</id>
  
  <author>
    <name>Fengyongbin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IO流</title>
    <link href="https://fengyongbin.github.io/2020/08/07/IO%E6%B5%81/"/>
    <id>https://fengyongbin.github.io/2020/08/07/IO%E6%B5%81/</id>
    <published>2020-08-07T11:54:06.058Z</published>
    <updated>2020-08-08T14:49:13.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><blockquote><p>按流的方向分输入流和输出流，由硬盘到内存称为输入流，由内存到硬盘称为输出流。按照读取读取数据的方式又分为字符流和字节流。<br>IO流里以stream结尾的是字节流，以Reader、Writer结尾的是字符流。流是内存和硬盘之间的管道用完之后需要关闭不然会消耗资源，关闭流使用clos()方法，输出流输出的时候要进行刷新使用flash()方法表示将管道里未输出的数据强行输出完如果没有刷新可能造成数据丢失。</p></blockquote><h3 id="字符流和字节流"><a href="#字符流和字节流" class="headerlink" title="字符流和字节流"></a>字符流和字节流</h3><blockquote><p>字节流一次读1个字节，字节流什么文件都可以读，包括文本、图片、声音、视频。<br>字符流一次读1个字符，只能读取纯文本数据。</p></blockquote><h3 id="文件专属"><a href="#文件专属" class="headerlink" title="文件专属"></a>文件专属</h3><blockquote><p>FileInputstram、FileReader、FileWriter。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fi = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">             fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\hukate.txt&quot;</span>);</span><br><span class="line">             <span class="keyword">byte</span> [] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">             <span class="keyword">while</span>((count=fi.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                 System.out.print(<span class="keyword">new</span> String(b,<span class="number">0</span>,count));</span><br><span class="line">             &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fi != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fi.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">available()方法是显示数组还剩多少字节没有读可以直接给<span class="keyword">byte</span>数组做长度读取时候就不需要循环一次读取完成<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[fi.available()]，skip()方法是跳过多少个字节不读。</span><br></pre></td></tr></table></figure><blockquote><p>FileOutputstram</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamtest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileOutputStream fo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             fo = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D://liubing.txt&quot;</span>);</span><br><span class="line">             String s =<span class="string">&quot;胡卡特溜冰&quot;</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line">            fo.write(bytes);</span><br><span class="line">            fo.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fo.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">这种方式给定文件没有时会新建，每次添加是把原内容情况后加入，要想在原内容后面添加需要在在构造方法里append标记为ture,fo = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D://liubing.txt&quot;</span>,<span class="keyword">true</span>)。</span><br></pre></td></tr></table></figure><blockquote><p>文件复制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fi = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fo =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\hukate.txt&quot;</span>);</span><br><span class="line">             fo = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\hukate.txt&quot;</span>);</span><br><span class="line">             <span class="keyword">byte</span> [] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>*<span class="number">1024</span>];</span><br><span class="line">             <span class="comment">//一次拷贝10kb</span></span><br><span class="line">             <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">while</span> ((count = fi.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                 fo.write(b,<span class="number">0</span>,count);</span><br><span class="line">             &#125;</span><br><span class="line">             fo.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fo.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fi != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fi.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">两个关闭方法不可以用一个<span class="keyword">try</span>...<span class="keyword">catch</span>进行处理，不然一个关闭出错，另一个也关闭不了。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IO流分类&quot;&gt;&lt;a href=&quot;#IO流分类&quot; class=&quot;headerlink&quot; title=&quot;IO流分类&quot;&gt;&lt;/a&gt;IO流分类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;按流的方向分输入流和输出流，由硬盘到内存称为输入流，由内存到硬盘称为输出流。按照读取读取数
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>集合框架</title>
    <link href="https://fengyongbin.github.io/2020/08/02/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://fengyongbin.github.io/2020/08/02/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</id>
    <published>2020-08-02T08:51:30.244Z</published>
    <updated>2020-08-08T14:34:13.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><blockquote><p>Collection接口有很多实现类，这里重点介绍常用的几个集合。Collection子接口List和Set，List接口实现类ArrayList、LinkeList、Vector，Set接口实现类HashSet、sortedset接口下的TreeSet。</p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><blockquote><p>List集合有序可重复，这里有序是指存入的顺序和取出的顺序是一样的。</p></blockquote><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>从源码可以看出在JDK1.8时候，ArrayList底层创建一个Object[]的数组,默认初始化容量为0，不是线程安全的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>当第一次使用add方法加入元素时，首先会调用ensureCapacityInternal方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ensureExplicitCapacity(minCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时elementData和DEFAULTCAPACITY_EMPTY_ELEMENTDATA都是0，minCapacity为1，所以minCapacity就被赋值为10，然后调用ensureExplicitCapacity方法。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>此时minCapacity为10，minCapacity - elementData.length &gt; 0成立，调用grow方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>oldCapacity和newCapacity都为0，newCapacity - minCapacity &lt; 0成立，newCapacity为10，可以看出第一次通过add方法增加元素后ArrayList的容量为10。再通过add方法增加第二次元素时，minCapacity为2，此时elementData.length经过扩容后为10，minCapacity - elementData.length &gt; 0不成立，不会调用grow方法，容量一直为10。直到增加11个元素后，minCapacity - elementData.length &gt; 0成立，调用grow方法，oldCapacity为10，newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)扩容到oldCapacity的1.5倍（oldCapacity &gt;&gt; 1时二进制位向右移一位，例如100移动变为010，由4变为2所以newCapacity=oldCapacity+0.5oldCapacity）。</p></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><blockquote><p>LinkedList底层是双向链表，不是线程安全的，双向链表节点有上一个节点的内存地址、下一个节点的内存地址和元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><blockquote><p>第一次通过add方法添加元素后调用linkLast方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>first、last默认为null，l赋值为null，建立一个新节点名为节点1（假设内存地址为0x234）上一个节点内存地址为l也就是null，下一个节点内存地址也为null，存取元素假设为a，节点1结构为null|a|null。last = newNode，将节点1的内存地址赋值给last（last此时内存为0x234）让last指向节点1。l == null也成立，将节点1的内存地址赋值给first（此时内存为0x234），此时first也指向节点1。第二次通过add方法增加元素，会先调用linkLast方法，将last内存地址赋值给l（0x234），然后创建一个新节点名为节点2(假设内存地址为0x345)，上一个内存地址为l也就是0x234，储存元素假设为b，下一个节点内存地址为null，节点2结构为0x234|b|null，这时l == null不满足条件执行l.next = newNode，l.next被赋值为节点2的内存地址（0x345），l.next就是节点1上指向下一个节点的内存地址，此时节点1结构为null|a|0x345，节点2是上一个节点内存地址为0x234指向节点1，节点1下一个节点内存地址0x345指向节点2，LinkedList完成了双向链表的建立。<br><img src="https://pic2.zhimg.com/80/v2-4231d0bcf4e97510d7a0206ecba9ab27_720w.jpeg" alt="LinkedList" loading="lazy"></p></blockquote><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><blockquote><p>Vector被synchronized修饰是线程同步的，是线程安全的但是由于效率较低和线程安全有更好的方式所以很少使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Vector底层也是一个数组，默认初始化容量为10。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      modCount++;</span><br><span class="line">      ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">      elementData[elementCount++] = e;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一次通过add方法增加元素时，调用ensureCapacityHelper方法，minCapacity为elementCount + 1，elementCount默认值为0，所以minCapacity为1。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>minCapacity为1，elementData.length为10，minCapacity - elementData.length &gt; 0就不满足不会调用grow方法，直到minCapacity为11。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>oldCapacity为10，capacityIncrement默认为0，（capacityIncrement &gt; 0) ?capacityIncrement : oldCapacity为oldCapatity，newCapacity=oldCapatity+oldCapatity，容量扩大为2倍。</p></blockquote><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>Set集合无序，不可存入相同元素。</p></blockquote><h3 id="HashSet、TreeSet"><a href="#HashSet、TreeSet" class="headerlink" title="HashSet、TreeSet"></a>HashSet、TreeSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>HashSet、TreeSet底层创建的是HashMap、TreeMap相当于把元素存取HashMap、TreeMap的key部分，所以直接介绍HashMap和TreeMap。</p></blockquote><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><blockquote><p>Map有kry和value部分，实现类有HashMap、Hashtable、sortedmap接口的实现类TreeMap，Hashtable的子类Properties。</p></blockquote><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><blockquote><p>Hashtable底层是数组加链表，初始化容量为11，负载因子为0.75，Hashtable扩容为2倍加1，hashtable被synchronized修饰是线程安全的，Hashtable的key值不可以是null而HashMap的key值可以为null。</p></blockquote><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><blockquote><p>Properties是一个Map集合，继承Hashtable，Properties的key和value都是string类型的不可为null，被称为属性类对象，。</p></blockquote><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><blockquote><p>TreeMap底层是一个红黑树没有容量限制，TreeMap中元素无序不可重复，但可以按照元素的大小顺序自动排序，称为可排序集合。但是自定义类要实现排序需要实现Comparable接口或者编写比较器实现Compartor接口。</p></blockquote><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote><p>HashMap中有key、value、hash、next（下一个节点的内存地址），HashMap在JDK1.7和JDK1.8中有所不同，JDK1.7中HashMap底层是单向链表加数组，JDK1.8HashMap底层是数组加单向链表加红黑树，HashMap不是线程安全的。HashMap存入元素时，通过hashCode方法得到元素key部分的哈希值，通过哈希算法计算出数组的下标。如果数组下标处没有元素就存入，如果有元素通过equals方法比较key，如果key相同就会覆盖原先的value值，如何key不同就会建立一个单项链表相连。<br><img src="https://pic2.zhimg.com/80/v2-34d4d8da7c0d54e89ea727f3324b4403_720w.jpeg" alt="HashMap底层" loading="lazy"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><blockquote><p>HashMap的初始化容量为16，负载因子为0.75，16*0.75=12当元素数量达到12时HashMap开始扩容，扩大为原来容量的2倍，当HashMap中链表元素数量为8或者数组长度为64就会转化为红黑树，当红黑树中元素数量小于6就会转化为链表或者数组。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Collection接口有很多实现类，这里重点介绍
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://fengyongbin.github.io/2020/08/01/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://fengyongbin.github.io/2020/08/01/%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-08-01T03:32:36.883Z</published>
    <updated>2020-08-01T03:39:44.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote><p>String在JDK1.8和JDK1.9中底层有所不同，在JDK1.8中String底层是char数组并用final修饰，在JDK1.9中底层改为byte数组。直接用引号的字符串在堆的字符串常量池中，只创建一次内存地址相同。字符串不适合进行频繁拼接，可能会引起内存溢出。</p></blockquote><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><blockquote><p>Stringbuffer底层是一个初始容量为16的byte数组，他没有被final修饰被用于字符串拼接操作。当StingBuffer容量不足时会进行扩容，容量扩大2倍加2。Stringbuffer被synchronized修饰是线程安全的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> newCapacity = (value.length &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       newCapacity = minCapacity;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>int newCapacity = (value.length &lt;&lt; 1) + 2;二进制位向左一位，例如010变成100变大一倍，然后加2，所以StringBuffer容量扩大二倍加2。</p></blockquote><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><blockquote><p>StringBuilder于StringBuffer一样都是用于字符串拼接操作，StingBuilder不是线程安全的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;String在JDK1.8和JDK1.9中底层有所不同，在JDK1.8中Strin
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
